"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[336],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>s});var a=n(96540);const o={},i=a.createContext(o);function l(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),a.createElement(i.Provider,{value:t},e.children)}},48300:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/evaluate_metrics-9a2ebf6bfedb75f3225ef9c06d30cbd9.png"},56889:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"mlflow-3/genai-agent","title":"GenAI Agent with MLflow 3.0","description":"Prerequisites:","source":"@site/docs/mlflow-3/genai-agent.mdx","sourceDirName":"mlflow-3","slug":"/mlflow-3/genai-agent","permalink":"/docs/2.22.0rc0/mlflow-3/genai-agent","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"MLflow 3.0","permalink":"/docs/2.22.0rc0/mlflow-3/"},"next":{"title":"Deep Learning","permalink":"/docs/2.22.0rc0/mlflow-3/deep-learning"}}');var o=n(74848),i=n(28453),l=n(67756);const s={sidebar_position:2},r="GenAI Agent with MLflow 3.0",c={},m=[{value:"Initialize OpenAI client",id:"initialize-openai-client",level:2},{value:"Test the model with tracing observability",id:"test-the-model-with-tracing-observability",level:2},{value:"Evaluate the agent&#39;s performance",id:"evaluate-the-agents-performance",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"genai-agent-with-mlflow-30",children:"GenAI Agent with MLflow 3.0"})}),"\n",(0,o.jsx)(t.p,{children:"Prerequisites:\nRun the following command to install MLflow 3.0 and OpenAI packages."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"pip install --upgrade mlflow>=3.0.0rc0 --pre\npip install openai\n"})}),"\n",(0,o.jsx)(t.p,{children:"This example demonstrates how to use MLflow to trace and evaluate OpenAI requests with prompts engineering.\nIt showcases how to register prompts, generate traces, and assess response performance using evaluation datasets.\nThe example also highlights the ability to track interactive traces and link them to the logged model for better observability."}),"\n",(0,o.jsx)(t.h2,{id:"initialize-openai-client",children:"Initialize OpenAI client"}),"\n",(0,o.jsx)(t.p,{children:"First, we initialize an OpenAI client, use its chat completions API for answering questions, and utilize MLflow's prompt registry capability to manage and link prompts effectively."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'from openai import OpenAI\n\nimport mlflow\n\nmlflow.set_experiment("genai_example")\n\nclient = OpenAI()\nquestion = "What is MLflow?"\n\n# register a prompt so we can link it when logging the model\nsystem_prompt = mlflow.register_prompt(\n    name="chatbot_prompt",\n    template="You are a chatbot that can answer questions about IT. Answer this question: {{question}}",\n    commit_message="Initial version of chatbot",\n)\n\nprint(\n    client.completions.create(\n        prompt=system_prompt.format(question=question),\n        model="gpt-3.5-turbo-instruct",\n        temperature=0.1,\n        max_tokens=2000,\n    )\n    .choices[0]\n    .text\n)\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Switch to the ",(0,o.jsx)(t.strong,{children:"Prompts"})," tab to view the registered prompt and its details:"]}),"\n",(0,o.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"The MLflow UI showing a prompt version",src:n(75245).A+"",width:"4672",height:"1018"})})}),"\n",(0,o.jsx)(t.h2,{id:"test-the-model-with-tracing-observability",children:"Test the model with tracing observability"}),"\n",(0,o.jsx)(t.p,{children:"In this section, we manually test the model with example queries and leverage MLflow Tracing to analyze the outputs and debug potential issues.\nWith autologging enabled, MLflow automatically creates a LoggedModel and links the generated traces to it, ensuring seamless observability."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"# Enable autologging so that interactive traces from the client are automatically linked to a LoggedModel\nmlflow.openai.autolog()\n\nquestions = [\n    \"What is MLflow Tracking and how does it work?\",\n    \"What is Unity Catalog?\",\n    \"What are user-defined functions (UDFs)?\",\n]\noutputs = []\n\nfor question in questions:\n    outputs.append(\n        client.completions.create(\n            prompt=system_prompt.format(question=question),\n            model=\"gpt-3.5-turbo-instruct\",\n            temperature=0.1,\n            max_tokens=2000,\n        )\n        .choices[0]\n        .text\n    )\n\nlogged_model = mlflow.last_logged_model()\ntraces = mlflow.search_traces(model_id=logged_model.model_id)\nprint(traces)\n\n#                          request_id                                              trace  ...                                               tags assessments\n# 0  56be163823ff457db4b30a97e704c709  Trace(request_id=56be163823ff457db4b30a97e704c...  ...  {'mlflow.artifactLocation': 'file:///Users/ser...          []\n# 1  71b7dc5eafd7486b989712e428a96522  Trace(request_id=71b7dc5eafd7486b989712e428a96...  ...  {'mlflow.artifactLocation': 'file:///Users/ser...          []\n# 2  68fa9c943dbc44df96da0b89611ed643  Trace(request_id=68fa9c943dbc44df96da0b89611ed...  ...  {'mlflow.artifactLocation': 'file:///Users/ser...          []\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Check out the ",(0,o.jsx)(t.strong,{children:"Models"})," tab in the experiment to view the newly logged model."]}),"\n",(0,o.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"The MLflow UI showing the logged models in an experiment",src:n(71124).A+"",width:"4672",height:"680"})})}),"\n",(0,o.jsxs)(t.p,{children:["On the ",(0,o.jsx)(t.strong,{children:"Logged Model"})," page, you can view detailed information, including the ",(0,o.jsx)(t.code,{children:"model_id"}),"."]}),"\n",(0,o.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"The MLflow UI showing the logged model details page",src:n(96749).A+"",width:"4672",height:"2006"})})}),"\n",(0,o.jsxs)(t.p,{children:["Navigating to the ",(0,o.jsx)(t.strong,{children:"Traces"})," tab of the model's page, you can view the traces that were just generated."]}),"\n",(0,o.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"The MLflow UI showing the logged model autolog traces lineage",src:n(74830).A+"",width:"4672",height:"2922"})})}),"\n",(0,o.jsx)(t.h2,{id:"evaluate-the-agents-performance",children:"Evaluate the agent's performance"}),"\n",(0,o.jsxs)(t.p,{children:["Finally, we use ",(0,o.jsx)(l.B,{fn:"mlflow.evaluate"})," to assess the performance of the logged model on an evaluation dataset.\nThis step involves calculating additional metrics, such as latency and answer correctness, to gain deeper insights into the model's behavior and accuracy."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# Prepare the eval dataset in a pandas DataFrame\nimport pandas as pd\nfrom mlflow.entities import LoggedModelInput\n\neval_df = pd.DataFrame(\n    {\n        "messages": questions,\n        "expected_response": [\n            """MLflow Tracking is a key component of the MLflow platform designed to record and manage machine learning experiments. It enables data scientists and engineers to log parameters, code versions, metrics, and artifacts in a systematic way, facilitating experiment tracking and reproducibility.\\n\\nHow It Works:\\n\\nAt the heart of MLflow Tracking is the concept of a run, which is an execution of a machine learning code. Each run can log the following:\\n\\nParameters: Input variables or hyperparameters used in the model (e.g., learning rate, number of trees). Metrics: Quantitative measures to evaluate the model\'s performance (e.g., accuracy, loss). Artifacts: Output files like models, datasets, or images generated during the run. Source Code: The version of the code or Git commit hash used. These logs are stored in a tracking server, which can be set up locally or on a remote server. The tracking server uses a backend storage (like a database or file system) to keep a record of all runs and their associated data.\\n\\n Users interact with MLflow Tracking through its APIs available in multiple languages (Python, R, Java, etc.). By invoking these APIs in the code, you can start and end runs, and log data as the experiment progresses. Additionally, MLflow offers autologging capabilities for popular machine learning libraries, automatically capturing relevant parameters and metrics without manual code changes.\\n\\nThe logged data can be visualized using the MLflow UI, a web-based interface that displays all experiments and runs. This UI allows you to compare runs side-by-side, filter results, and analyze performance metrics over time. It aids in identifying the best models and understanding the impact of different parameters.\\n\\nBy providing a structured way to record experiments, MLflow Tracking enhances collaboration among team members, ensures transparency, and makes it easier to reproduce results. It integrates seamlessly with other MLflow components like Projects and Model Registry, offering a comprehensive solution for managing the machine learning lifecycle.""",\n            """Unity Catalog is a feature in Databricks that allows you to create a centralized inventory of your data assets, such as tables, views, and functions, and share them across different teams and projects. It enables easy discovery, collaboration, and reuse of data assets within your organization.\\n\\nWith Unity Catalog, you can:\\n\\n1. Create a single source of truth for your data assets: Unity Catalog acts as a central repository of all your data assets, making it easier to find and access the data you need.\\n2. Improve collaboration: By providing a shared inventory of data assets, Unity Catalog enables data scientists, engineers, and other stakeholders to collaborate more effectively.\\n3. Foster reuse of data assets: Unity Catalog encourages the reuse of existing data assets, reducing the need to create new assets from scratch and improving overall efficiency.\\n4. Enhance data governance: Unity Catalog provides a clear view of data assets, enabling better data governance and compliance.\\n\\nUnity Catalog is particularly useful in large organizations where data is scattered across different teams, projects, and environments. It helps create a unified view of data assets, making it easier to work with data across different teams and projects.""",\n            """User-defined functions (UDFs) in the context of Databricks and Apache Spark are custom functions that you can create to perform specific tasks on your data. These functions are written in a programming language such as Python, Java, Scala, or SQL, and can be used to extend the built-in functionality of Spark.\\n\\nUDFs can be used to perform complex data transformations, data cleaning, or to apply custom business logic to your data. Once defined, UDFs can be invoked in SQL queries or in DataFrame transformations, allowing you to reuse your custom logic across multiple queries and applications.\\n\\nTo use UDFs in Databricks, you first need to define them in a supported programming language, and then register them with the SparkSession. Once registered, UDFs can be used in SQL queries or DataFrame transformations like any other built-in function.\\n\\nHere\\\'s an example of how to define and register a UDF in Python:\\n\\n```python\\nfrom pyspark.sql.functions import udf\\nfrom pyspark.sql.types import IntegerType\\n\\n# Define the UDF function\\ndef multiply_by_two(value):\\n    return value * 2\\n\\n# Register the UDF with the SparkSession\\nmultiply_udf = udf(multiply_by_two, IntegerType())\\n\\n# Use the UDF in a DataFrame transformation\\ndata = spark.range(10)\\nresult = data.withColumn("multiplied", multiply_udf(data.id))\\nresult.show()\\n```\\n\\nIn this example, we define a UDF called `multiply_by_two` that multiplies a given value by two. We then register this UDF with the SparkSession using the `udf` function, and use it in a DataFrame transformation to multiply the `id` column of a DataFrame by two.""",\n        ],\n        "predictions": outputs,\n    }\n)\n\n# Start a run to represent the evaluation job\nwith mlflow.start_run() as evaluation_run:\n    eval_dataset = mlflow.data.from_pandas(\n        df=eval_df,\n        name="eval_dataset",\n        targets="expected_response",\n        predictions="predictions",\n    )\n    mlflow.log_input(\n        dataset=eval_dataset, model=LoggedModelInput(logged_model.model_id)\n    )\n    # Run the evaluation based on extra metrics\n    result = mlflow.evaluate(\n        data=eval_dataset,\n        model_type="question-answering",\n        extra_metrics=[\n            mlflow.metrics.latency(),\n            mlflow.metrics.genai.answer_correctness("openai:/gpt-4o"),\n        ],\n        # This is needed since answer_correctness looks for \'inputs\' field\n        evaluator_config={"col_mapping": {"inputs": "messages"}},\n    )\n\nprint(result.tables["eval_results_table"])\n#                                         messages  ...                answer_correctness/v1/justification\n# 0  What is MLflow Tracking and how does it work?  ...  The output is mostly correct, providing accura...\n# 1                         What is Unity Catalog?  ...  The output is completely incorrect as it descr...\n# 2        What are user-defined functions (UDFs)?  ...  The output provides a general definition of us...\n'})}),"\n",(0,o.jsx)(t.p,{children:"Navigating to the evaluation run, you can see the metrics and their details displayed in the MLflow UI. This includes metrics like latency and answer correctness, providing insights into the model's performance."}),"\n",(0,o.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"The MLflow UI showing the evaluate run metrics",src:n(48300).A+"",width:"4672",height:"2922"})})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},67756:(e,t,n)=>{n.d(t,{B:()=>r});n(96540);const a=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.fastai":"api_reference/python_api/mlflow.fastai.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.mleap":"api_reference/python_api/mlflow.mleap.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow.recipes":"api_reference/python_api/mlflow.recipes.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var o=n(29030),i=n(56289),l=n(74848);const s=e=>{const t=e.split(".");for(let n=t.length;n>0;n--){const e=t.slice(0,n).join(".");if(a[e])return e}return null};function r(e){let{fn:t,children:n}=e;const r=s(t);if(!r)return(0,l.jsx)(l.Fragment,{children:n});const c=(0,o.Ay)(`/${a[r]}#${t}`);return(0,l.jsx)(i.A,{to:c,target:"_blank",children:n??(0,l.jsxs)("code",{children:[t,"()"]})})}},71124:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/logged_models_tab-7cc01998e2558d4920a1b099f88e529b.png"},74830:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/logged_model_autolog_traces-abdf4ace85f4fd96c595f1134090b505.png"},75245:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/chatbot_prompt-3f6045bb548d49ffa229f88dc28b2aca.png"},96749:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/logged_model_page-2e0754dd009f52b167b6dd7342dac8ce.png"}}]);