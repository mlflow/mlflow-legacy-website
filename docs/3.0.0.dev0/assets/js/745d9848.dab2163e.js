"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7726],{11279:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/txtai-rag-tracing-507199b924f1c7ed180e0d940758e2dc.png"},43951:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/txtai-textractor-tracing-15f2e1b268fc3fc4921c06e5e9a87cd8.png"},47498:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/txtai-agent-tracing-f69f47a9de38c40814ea985887782850.png"},67756:(e,t,n)=>{n.d(t,{B:()=>s});n(96540);const a=JSON.parse('{"mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.genai":"api_reference/python_api/mlflow.genai.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pydantic_ai":"api_reference/python_api/mlflow.pydantic_ai.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.smolagents":"api_reference/python_api/mlflow.smolagents.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var l=n(29030),r=n(56289),i=n(74848);const o=e=>{const t=e.split(".");for(let n=t.length;n>0;n--){const e=t.slice(0,n).join(".");if(a[e])return e}return null};function s(e){let{fn:t,children:n}=e;const s=o(t);if(!s)return(0,i.jsx)(i.Fragment,{children:n});const m=(0,l.Ay)(`/${a[s]}#${t}`);return(0,i.jsx)(r.A,{to:m,target:"_blank",children:n??(0,i.jsxs)("code",{children:[t,"()"]})})}},81138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"tracing/integrations/txtai","title":"Tracing txtai","description":"txtai Tracing via autolog","source":"@site/docs/tracing/integrations/txtai.mdx","sourceDirName":"tracing/integrations","slug":"/tracing/integrations/txtai","permalink":"/docs/3.0.0.dev0/tracing/integrations/txtai","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13,"sidebar_label":"txtai"},"sidebar":"docsSidebar","previous":{"title":"Instructor","permalink":"/docs/3.0.0.dev0/tracing/integrations/instructor"},"next":{"title":"Add New Integration","permalink":"/docs/3.0.0.dev0/tracing/integrations/contribute"}}');var l=n(74848),r=n(28453);n(67756),n(86294),n(61096),n(65537),n(79329);const i={sidebar_position:13,sidebar_label:"txtai"},o="Tracing txtai",s={},m=[{value:"Basic Example",id:"basic-example",level:3},{value:"Retrieval Augmented Generation (RAG)",id:"retrieval-augmented-generation-rag",level:3},{value:"Agent",id:"agent",level:3},{value:"More Information",id:"more-information",level:3}];function p(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"tracing-txtai",children:"Tracing txtai"})}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"txtai Tracing via autolog",src:n(11279).A+"",width:"1919",height:"1008"})}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.a,{href:"https://github.com/neuml/txtai?tab=readme-ov-file",children:"txtai"})," is an all-in-one embeddings database for semantic search, LLM orchestration and language model workflows."]}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.a,{href:"../",children:"MLflow Tracing"})," provides automatic tracing capability for txtai. Auto tracing for txtai can be enabled by calling the ",(0,l.jsx)(t.code,{children:"mlflow.txtai.autolog"})," function, MLflow will capture traces for LLM invocation, embeddings, vector search, and log them to the active MLflow Experiment."]}),"\n",(0,l.jsxs)(t.p,{children:["To get started, install the ",(0,l.jsx)(t.a,{href:"https://github.com/neuml/mlflow-txtai/tree/master",children:"MLflow txtai extension"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"pip install mlflow-txtai\n"})}),"\n",(0,l.jsx)(t.p,{children:"Then, enable autologging in your Python code:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:"import mlflow\n\nmlflow.txtai.autolog()\n"})}),"\n",(0,l.jsx)(t.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,l.jsxs)(t.p,{children:["The first example traces a ",(0,l.jsx)(t.a,{href:"https://neuml.github.io/txtai/pipeline/data/textractor/",children:"Textractor pipeline"}),"."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:'import mlflow\nfrom txtai.pipeline import Textractor\n\n# Enable MLflow auto-tracing for txtai\nmlflow.txtai.autolog()\n\n# Optional: Set a tracking URI and an experiment\nmlflow.set_tracking_uri("http://localhost:5000")\nmlflow.set_experiment("txtai")\n\n# Define and run a simple Textractor pipeline.\ntextractor = Textractor()\ntextractor("https://github.com/neuml/txtai")\n'})}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"txtai Textractor Tracing via autolog",src:n(43951).A+"",width:"1899",height:"1003"})}),"\n",(0,l.jsx)(t.h3,{id:"retrieval-augmented-generation-rag",children:"Retrieval Augmented Generation (RAG)"}),"\n",(0,l.jsxs)(t.p,{children:["The next example traces a ",(0,l.jsx)(t.a,{href:"https://neuml.github.io/txtai/pipeline/text/rag/",children:"RAG pipeline"}),"."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:'import mlflow\nfrom txtai import Embeddings, RAG\n\n# Enable MLflow auto-tracing for txtai\nmlflow.txtai.autolog()\n\n\nwiki = Embeddings()\nwiki.load(provider="huggingface-hub", container="neuml/txtai-wikipedia-slim")\n\n# Define prompt template\ntemplate = """\nAnswer the following question using only the context below. Only include information\nspecifically discussed.\n\nquestion: {question}\ncontext: {context} """\n\n# Create RAG pipeline\nrag = RAG(\n    wiki,\n    "hugging-quants/Meta-Llama-3.1-8B-Instruct-AWQ-INT4",\n    system="You are a friendly assistant. You answer questions from users.",\n    template=template,\n    context=10,\n)\n\nrag("Tell me about the Roman Empire", maxlength=2048)\n'})}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"txtai Rag Tracing via autolog",src:n(11279).A+"",width:"1919",height:"1008"})}),"\n",(0,l.jsx)(t.h3,{id:"agent",children:"Agent"}),"\n",(0,l.jsxs)(t.p,{children:["The last example runs a ",(0,l.jsx)(t.a,{href:"https://neuml.github.io/txtai/agent/",children:"txtai agent"})," designed to research questions on astronomy."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:'import mlflow\nfrom txtai import Agent, Embeddings\n\n# Enable MLflow auto-tracing for txtai\nmlflow.txtai.autolog()\n\n\ndef search(query):\n    """\n    Searches a database of astronomy data.\n\n    Make sure to call this tool only with a string input, never use JSON.\n\n    Args:\n        query: concepts to search for using similarity search\n\n    Returns:\n        list of search results with for each match\n    """\n\n    return embeddings.search(\n        "SELECT id, text, distance FROM txtai WHERE similar(:query)",\n        10,\n        parameters={"query": query},\n    )\n\n\nembeddings = Embeddings()\nembeddings.load(provider="huggingface-hub", container="neuml/txtai-astronomy")\n\nagent = Agent(\n    tools=[search],\n    llm="hugging-quants/Meta-Llama-3.1-8B-Instruct-AWQ-INT4",\n    max_iterations=10,\n)\n\nresearcher = """\n{command}\n\nDo the following.\n - Search for results related to the topic.\n - Analyze the results\n - Continue querying until conclusive answers are found\n - Write a Markdown report\n"""\n\nagent(\n    researcher.format(\n        command="""\nWrite a detailed list with explanations of 10 candidate stars that could potentially be habitable to life.\n"""\n    ),\n    maxlength=16000,\n)\n'})}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"txtai Agent Tracing via autolog",src:n(47498).A+"",width:"1905",height:"995"})}),"\n",(0,l.jsx)(t.h3,{id:"more-information",children:"More Information"}),"\n",(0,l.jsxs)(t.p,{children:["For more examples and guidance on using txtai with MLflow, please refer to the ",(0,l.jsx)(t.a,{href:"https://github.com/neuml/mlflow-txtai/tree/master",children:"MLflow txtai extension documentation"})]})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(p,{...e})}):p(e)}},86294:(e,t,n)=>{n.d(t,{Zp:()=>s,AC:()=>o,WO:()=>p,tf:()=>d,_C:()=>m,$3:()=>c,jK:()=>h});var a=n(34164);const l={CardGroup:"CardGroup_P84T",MaxThreeColumns:"MaxThreeColumns_FO1r",AutofillColumns:"AutofillColumns_fKhQ",Card:"Card_aSCR",CardBordered:"CardBordered_glGF",CardBody:"CardBody_BhRs",TextColor:"TextColor_a8Tp",BoxRoot:"BoxRoot_Etgr",FlexWrapNowrap:"FlexWrapNowrap_f60k",FlexJustifyContentFlexStart:"FlexJustifyContentFlexStart_ZYv5",FlexDirectionRow:"FlexDirectionRow_T2qL",FlexAlignItemsCenter:"FlexAlignItemsCenter_EHVM",FlexFlex:"FlexFlex__JTE",Link:"Link_fVkl",MarginLeft4:"MarginLeft4_YQSJ",MarginTop4:"MarginTop4_jXKN",PaddingBottom4:"PaddingBottom4_O9gt",LogoCardContent:"LogoCardContent_kCQm",LogoCardImage:"LogoCardImage_JdcX",SmallLogoCardContent:"SmallLogoCardContent_LxhV",SmallLogoCardImage:"SmallLogoCardImage_tPZl",NewFeatureCardContent:"NewFeatureCardContent_Rq3d",NewFeatureCardHeading:"NewFeatureCardHeading_f6q3",NewFeatureCardHeadingSeparator:"NewFeatureCardHeadingSeparator_pSx8",NewFeatureCardTags:"NewFeatureCardTags_IFHO",NewFeatureCardWrapper:"NewFeatureCardWrapper_NQ0k",TitleCardContent:"TitleCardContent_l9MQ",TitleCardTitle:"TitleCardTitle__K8J",TitleCardSeparator:"TitleCardSeparator_IN2E",Cols1:"Cols1_Gr2U",Cols2:"Cols2_sRvc",Cols3:"Cols3_KjUS",Cols4:"Cols4_dKOj",Cols5:"Cols5_jDmj",Cols6:"Cols6_Q0OR"};var r=n(56289),i=n(74848);const o=e=>{let{children:t,isSmall:n,cols:r}=e;return(0,i.jsx)("div",{className:(0,a.A)(l.CardGroup,n?l.AutofillColumns:r?l[`Cols${r}`]:l.MaxThreeColumns),children:t})},s=e=>{let{children:t,link:n=""}=e;return n?(0,i.jsx)(r.A,{className:(0,a.A)(l.Link,l.Card,l.CardBordered),to:n,children:t}):(0,i.jsx)("div",{className:(0,a.A)(l.Card,l.CardBordered),children:t})},m=e=>{let{headerText:t,link:n,text:r}=e;return(0,i.jsx)(s,{link:n,children:(0,i.jsxs)("span",{children:[(0,i.jsx)("div",{className:(0,a.A)(l.CardTitle,l.BoxRoot,l.PaddingBottom4),style:{pointerEvents:"none"},children:(0,i.jsx)("div",{className:(0,a.A)(l.BoxRoot,l.FlexFlex,l.FlexAlignItemsCenter,l.FlexDirectionRow,l.FlexJustifyContentFlexStart,l.FlexWrapNowrap),style:{marginLeft:"-4px",marginTop:"-4px"},children:(0,i.jsx)("div",{className:(0,a.A)(l.BoxRoot,l.BoxHideIfEmpty,l.MarginTop4,l.MarginLeft4),style:{pointerEvents:"auto"},children:(0,i.jsx)("span",{className:"",children:t})})})}),(0,i.jsx)("span",{className:(0,a.A)(l.TextColor,l.CardBody),children:(0,i.jsx)("p",{children:r})})]})})},p=e=>{let{description:t,children:n,link:a}=e;return(0,i.jsx)(s,{link:a,children:(0,i.jsxs)("div",{className:l.LogoCardContent,children:[(0,i.jsx)("div",{className:l.LogoCardImage,children:n}),(0,i.jsx)("p",{className:l.TextColor,children:t})]})})},c=e=>{let{children:t,link:n}=e;return(0,i.jsx)(s,{link:n,children:(0,i.jsx)("div",{className:l.SmallLogoCardContent,children:(0,i.jsx)("div",{className:(0,a.A)("max-height-img-container",l.SmallLogoCardImage),children:t})})})},d=e=>{let{children:t,description:n,name:a,releaseVersion:o,learnMoreLink:m=""}=e;return(0,i.jsx)(s,{children:(0,i.jsxs)("div",{className:l.NewFeatureCardWrapper,children:[(0,i.jsxs)("div",{className:l.NewFeatureCardContent,children:[(0,i.jsxs)("div",{className:l.NewFeatureCardHeading,children:[a,(0,i.jsx)("br",{}),(0,i.jsx)("hr",{className:l.NewFeatureCardHeadingSeparator})]}),(0,i.jsx)("div",{className:l.LogoCardImage,children:t}),(0,i.jsx)("br",{}),(0,i.jsx)("p",{children:n}),(0,i.jsx)("br",{})]}),(0,i.jsxs)("div",{className:l.NewFeatureCardTags,children:[(0,i.jsx)("div",{children:m&&(0,i.jsx)(r.A,{className:"button button--outline button--sm button--primary",to:m,children:"Learn more"})}),(0,i.jsxs)(r.A,{className:"button button--outline button--sm button--primary",to:`https://github.com/mlflow/mlflow/releases/tag/v${o}`,children:["released in ",o]})]})]})})},h=e=>{let{title:t,description:n,link:r=""}=e;return(0,i.jsx)(s,{link:r,children:(0,i.jsxs)("div",{className:l.TitleCardContent,children:[(0,i.jsx)("div",{className:(0,a.A)(l.TitleCardTitle),style:{textAlign:"left",fontWeight:"bold"},children:t}),(0,i.jsx)("hr",{className:(0,a.A)(l.TitleCardSeparator),style:{margin:"12px 0"}}),(0,i.jsx)("p",{className:(0,a.A)(l.TextColor),children:n})]})})}}}]);