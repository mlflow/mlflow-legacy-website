"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2191],{60104:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"tracing/api/search","title":"Query Traces","description":"This page describes how to query traces logged to MLflow.","source":"@site/docs/tracing/api/search.mdx","sourceDirName":"tracing/api","slug":"/tracing/api/search","permalink":"/docs/2.21.1/tracing/api/search","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Query Traces"},"sidebar":"docsSidebar","previous":{"title":"Manual Tracing","permalink":"/docs/2.21.1/tracing/api/manual-instrumentation"},"next":{"title":"How-to Guide","permalink":"/docs/2.21.1/tracing/api/how-to"}}');var l=r(74848),i=r(28453),a=r(67756);r(86294),r(61096),r(65537),r(79329);const s={sidebar_position:2,sidebar_label:"Query Traces"},o="Query Traces",c={},d=[{value:"Client vs High-Level API",id:"client-vs-high-level-api",level:2},{value:"Example Usage of Search Traces",id:"example-usage-of-search-traces",level:2},{value:"DataFrame Schema",id:"dataframe-schema",level:2},{value:"Filtering Traces",id:"filtering-traces",level:2},{value:"Filter Traces by Name",id:"filter-traces-by-name",level:3},{value:"Filter Traces by Timestamp",id:"filter-traces-by-timestamp",level:3},{value:"Filter Traces by Tags",id:"filter-traces-by-tags",level:3},{value:"Filter Traces by Status",id:"filter-traces-by-status",level:3},{value:"Combine Multiple Conditions",id:"combine-multiple-conditions",level:3},{value:"Order Traces",id:"order-traces",level:2},{value:"Extract Specific Fields",id:"extract-specific-fields",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"query-traces",children:"Query Traces"})}),"\n",(0,l.jsx)(n.p,{children:"This page describes how to query traces logged to MLflow."}),"\n",(0,l.jsx)(n.h2,{id:"client-vs-high-level-api",children:"Client vs High-Level API"}),"\n",(0,l.jsx)(n.p,{children:"MLflow provides two APIs for searching and retrieving traces:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(a.B,{fn:"mlflow.client.MlflowClient.search_traces",children:(0,l.jsx)(n.code,{children:"MlflowClient.search_traces()"})})}),": Query traces using experiment IDs, filter strings, and other parameters. This API returns ",(0,l.jsxs)(n.strong,{children:["a list of ",(0,l.jsx)(a.B,{fn:"mlflow.entities.Trace",children:(0,l.jsx)(n.code,{children:"Trace"})})," objects"]})," that matches with the given search criteria."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(a.B,{fn:"mlflow.search_traces"})}),": A higher-level API that supports the same filtering functionalities as the client APIs, but instead returns a pre-formatted ",(0,l.jsx)(n.strong,{children:"Pandas DataFrame"})," with each row representing a trace, simplifying the process of creating an evaluation dataset for ",(0,l.jsx)(n.a,{href:"/llms/llm-evaluate",children:"MLflow LLM Evaluation"}),"."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The following screenshot shows example of the returned traces from these APIs:"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"Search Traces Output",src:r(75321).A+"",width:"1572",height:"566"})}),"\n",(0,l.jsx)(n.h2,{id:"example-usage-of-search-traces",children:"Example Usage of Search Traces"}),"\n",(0,l.jsx)(n.p,{children:"First, create several traces using the following code:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import time\nimport mlflow\nfrom mlflow.entities import SpanType\n\n\n# Define methods to be traced\n@mlflow.trace(span_type=SpanType.TOOL, attributes={"time": "morning"})\ndef morning_greeting(name: str):\n    time.sleep(1)\n    mlflow.update_current_trace(tags={"person": name})\n    return f"Good morning {name}."\n\n\n@mlflow.trace(span_type=SpanType.TOOL, attributes={"time": "evening"})\ndef evening_greeting(name: str):\n    time.sleep(1)\n    mlflow.update_current_trace(tags={"person": name})\n    return f"Good evening {name}."\n\n\n@mlflow.trace(span_type=SpanType.TOOL)\ndef goodbye():\n    raise Exception("Cannot say goodbye")\n\n\n# Execute the methods within different experiments\nmorning_experiment = mlflow.set_experiment("Morning Experiment")\nmorning_greeting("Tom")\n\n# Get the timestamp in milliseconds\nmorning_time = int(time.time() * 1000)\n\nevening_experiment = mlflow.set_experiment("Evening Experiment")\nexperiment_ids = [morning_experiment.experiment_id, evening_experiment.experiment_id]\nevening_greeting("Mary")\ngoodbye()\n'})}),"\n",(0,l.jsx)(n.p,{children:"The code above creates the following traces:"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Experiment"}),(0,l.jsx)(n.th,{children:"Name"}),(0,l.jsx)(n.th,{children:"Tags.person"}),(0,l.jsx)(n.th,{children:"Status"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Morning Experiment"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"morning_greeting"})}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"Tom"})}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"OK"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Evening Experiment"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"evening_greeting"})}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"Mary"})}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"OK"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Evening Experiment"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"goodbye"})}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"N/A"})}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"ERROR"})})]})]})]}),"\n",(0,l.jsxs)(n.p,{children:["Searching the traces with ",(0,l.jsx)(a.B,{fn:"mlflow.client.MlflowClient.search_traces",children:(0,l.jsx)(n.code,{children:"MlflowClient.search_traces()"})})," gives you a list of ",(0,l.jsx)(a.B,{fn:"mlflow.entities.Trace",children:(0,l.jsx)(n.code,{children:"Trace"})})," objects."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from mlflow import MlflowClient\n\nclient = MlflowClient()\n\nclient.search_traces(experiment_ids=[morning_experiment.experiment_id])\n# [Trace #1]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(a.B,{fn:"mlflow.search_traces"})," fluent API returns a Pandas DataFrame instead."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'mlflow.search_traces(experiment_ids=[morning_experiment.experiment_id])\n#     request_id     status          ...    response\n# 0   [trace #1 ID]  TraceStatus.OK  ...    Good morning Tom.\n\n# If an experiment ID is not specified, MLflow uses the current active experiment ("Evening Experiment")\nmlflow.search_traces()\n#     request_id     status          ...    response\n# 0   [trace #2 ID]  TraceStatus.OK  ...    Good evening Tom.\n# 1   [trace #3 ID]  TraceStatus.OK  ...    NA\n'})}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsxs)(n.p,{children:[(0,l.jsx)(a.B,{fn:"mlflow.client.MlflowClient.search_traces",children:(0,l.jsx)(n.code,{children:"MlflowClient.search_traces()"})})," requires experiment IDs to be specified for searching traces from, whereas ",(0,l.jsx)(a.B,{fn:"mlflow.search_traces"})," does not require it and defaults to the current active experiment."]})}),"\n",(0,l.jsx)(n.h2,{id:"dataframe-schema",children:"DataFrame Schema"}),"\n",(0,l.jsxs)(n.p,{children:["The pandas DataFrame returned by the ",(0,l.jsx)(a.B,{fn:"mlflow.search_traces"})," API consists of the following columns by default:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"request_id"}),": A primary identifier of a trace"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"trace"}),": A trace object."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"timestamp_ms"}),": The start time of the trace in milliseconds."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"status"}),": The status of the trace."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"execution_time_ms"}),": The duration of the trace in milliseconds."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"request"}),": The input to the traced logic."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"response"}),": The output of the traced logic."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"request_metadata"}),": Key-value pairs associated with the trace."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"spans"}),": Spans in the trace."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"tags"}),": Tags associated with the trace."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Furthermore, you can extract span fields into additional columns using the ",(0,l.jsx)(n.a,{href:"#extract-specific-fields",children:"extract_fields"})," parameter."]}),"\n",(0,l.jsx)(n.h2,{id:"filtering-traces",children:"Filtering Traces"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"filter_string"})," argument in the search APIs provides a flexible way to query traces using a SQL-like Domain-Specific Language (DSL). The syntax supports searching traces with various metadata and allows for combining multiple conditions."]}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"filter_string"})," argument is supported in both client and fluent APIs and there is no syntax difference. The example below uses client API for demonstration purpose only."]})}),"\n",(0,l.jsx)(n.h3,{id:"filter-traces-by-name",children:"Filter Traces by Name"}),"\n",(0,l.jsxs)(n.p,{children:["Search for traces by name using the ",(0,l.jsx)(n.code,{children:"trace.name"})," key:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"client.search_traces(\n    experiment_ids=experiment_ids,\n    filter_string=\"trace.name = 'morning_greeting'\",\n)\n# [Trace #1]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"filter-traces-by-timestamp",children:"Filter Traces by Timestamp"}),"\n",(0,l.jsx)(n.p,{children:"Search traces created after a specific timestamp:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'client.search_traces(\n    experiment_ids=experiment_ids,\n    filter_string=f"trace.timestamp > {morning_time}",\n)\n# [Trace #2, Trace #3]\n'})}),"\n",(0,l.jsx)(n.h3,{id:"filter-traces-by-tags",children:"Filter Traces by Tags"}),"\n",(0,l.jsxs)(n.p,{children:["Filter traces by specific tag values using ",(0,l.jsx)(n.code,{children:"tag.[tag name]"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"client.search_traces(\n    experiment_ids=experiment_ids,\n    filter_string=\"tag.person = 'Tom'\",\n)\n# [Trace #1]\n"})}),"\n",(0,l.jsx)(n.p,{children:"The timestamp is recorded as a UNIX timestamp in milliseconds."}),"\n",(0,l.jsx)(n.h3,{id:"filter-traces-by-status",children:"Filter Traces by Status"}),"\n",(0,l.jsx)(n.p,{children:"Search for traces by their status:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"client.search_traces(\n    experiment_ids=experiment_ids,\n    filter_string=\"trace.status = 'OK'\",\n)\n# [Trace #1, Trace #2]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Trace status must be one of ",(0,l.jsx)(n.code,{children:'["OK", "ERROR", "IN_PROGRESS"]'}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"combine-multiple-conditions",children:"Combine Multiple Conditions"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"filter_string"})," DSL allows you to combine multiple filters together by using ",(0,l.jsx)(n.code,{children:"AND"}),"."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"client.search_traces(\n    experiment_ids=experiment_ids,\n    filter_string=f\"attributes.status = 'OK' AND attributes.timestamp > {morning_time}\",\n)\n# [Trace #2]\n"})}),"\n",(0,l.jsx)(n.h2,{id:"order-traces",children:"Order Traces"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"order_by"})," argument allows you to sort traces based on one or more fields. Each ",(0,l.jsx)(n.code,{children:"order_by"})," clause follows the format ",(0,l.jsx)(n.code,{children:"[attribute name] [ASC or DESC]"}),"."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'client.search_traces(\n    experiment_ids=experiment_ids,\n    order_by=["timestamp DESC"],\n)\n# [Trace #3, Trace #2, Trace #1]\n'})}),"\n",(0,l.jsx)(n.h2,{id:"extract-specific-fields",children:"Extract Specific Fields"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(a.B,{fn:"mlflow.search_traces"})," API allows you to extract specific fields from spans with ",(0,l.jsx)(n.code,{children:"extract_fields"})," argument. The span fields can be specifie in the format of ",(0,l.jsx)(n.code,{children:"span_name.[inputs|outputs]"})," or ",(0,l.jsx)(n.code,{children:"span_name.[inputs|outputs].field_name"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'traces = mlflow.search_traces(\n    extract_fields=[\n        # Extract the "name" field in the "morning_greeting" span inputs.\n        "morning_greeting.inputs.name",\n        # Extract the all output fields in the "morning_greeting" span.\n        "morning_greeting.outputs",\n    ],\n    experiment_ids=[morning_experiment.experiment_id],\n)\n\nprint(traces)\n'})}),"\n",(0,l.jsx)(n.p,{children:"The output Pandas DataFrame contains the additional columns for the extracted span fields:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"    request_id                              ...     morning_greeting.inputs.name   morning_greeting.outputs\n0   053adf2f5f5e4ad68d432e06e254c8a4        ...     'Tom'                          'Good morning Tom.'\n"})}),"\n",(0,l.jsxs)(n.p,{children:["This feature is particularly useful for building an evaluation dataset for your application. You can convert the returned Pandas DataFrame into an MLflow LLM evaluation dataset format by renaming fields, and evaluate your language model using the ",(0,l.jsx)(n.a,{href:"/llms/llm-evaluate",children:"mlflow.evaluate()"})," API."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'eval_data = traces.rename(\n    columns={\n        "morning_greeting.inputs.name": "inputs",\n        "morning_greeting.outputs": "ground_truth",\n    }\n)\nresults = mlflow.evaluate(\n    model,\n    eval_data,\n    targets="ground_truth",\n    model_type="question-answering",\n)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(m,{...e})}):m(e)}},67756:(e,n,r)=>{r.d(n,{B:()=>o});r(96540);const t=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.fastai":"api_reference/python_api/mlflow.fastai.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.mleap":"api_reference/python_api/mlflow.mleap.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow.recipes":"api_reference/python_api/mlflow.recipes.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var l=r(29030),i=r(56289),a=r(74848);const s=e=>{const n=e.split(".");for(let r=n.length;r>0;r--){const e=n.slice(0,r).join(".");if(t[e])return e}return null};function o(e){let{fn:n,children:r}=e;const o=s(n);if(!o)return(0,a.jsx)(a.Fragment,{children:r});const c=(0,l.Ay)(`/${t[o]}#${n}`);return(0,a.jsx)(i.A,{to:c,target:"_blank",children:r??(0,a.jsxs)("code",{children:[n,"()"]})})}},75321:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/search-traces-9926b04f23b22ab9c82b0e9e59966e39.png"},86294:(e,n,r)=>{r.d(n,{Zp:()=>o,AC:()=>s,WO:()=>d,tf:()=>h,_C:()=>c,$3:()=>m});var t=r(34164);const l={CardGroup:"CardGroup_P84T",MaxThreeColumns:"MaxThreeColumns_FO1r",AutofillColumns:"AutofillColumns_fKhQ",Card:"Card_aSCR",CardBordered:"CardBordered_glGF",CardBody:"CardBody_BhRs",TextColor:"TextColor_a8Tp",BoxRoot:"BoxRoot_Etgr",FlexWrapNowrap:"FlexWrapNowrap_f60k",FlexJustifyContentFlexStart:"FlexJustifyContentFlexStart_ZYv5",FlexDirectionRow:"FlexDirectionRow_T2qL",FlexAlignItemsCenter:"FlexAlignItemsCenter_EHVM",FlexFlex:"FlexFlex__JTE",Link:"Link_fVkl",MarginLeft4:"MarginLeft4_YQSJ",MarginTop4:"MarginTop4_jXKN",PaddingBottom4:"PaddingBottom4_O9gt",LogoCardContent:"LogoCardContent_kCQm",LogoCardImage:"LogoCardImage_JdcX",SmallLogoCardContent:"SmallLogoCardContent_LxhV",SmallLogoCardImage:"SmallLogoCardImage_tPZl",NewFeatureCardContent:"NewFeatureCardContent_Rq3d",NewFeatureCardHeading:"NewFeatureCardHeading_f6q3",NewFeatureCardHeadingSeparator:"NewFeatureCardHeadingSeparator_pSx8",NewFeatureCardTags:"NewFeatureCardTags_IFHO",NewFeatureCardWrapper:"NewFeatureCardWrapper_NQ0k"};var i=r(56289),a=r(74848);const s=e=>{let{children:n,isSmall:r}=e;return(0,a.jsx)("div",{className:(0,t.A)(l.CardGroup,r?l.AutofillColumns:l.MaxThreeColumns),children:n})},o=e=>{let{children:n,link:r=""}=e;return r?(0,a.jsx)(i.A,{className:(0,t.A)(l.Link,l.Card,l.CardBordered),to:r,children:n}):(0,a.jsx)("div",{className:(0,t.A)(l.Card,l.CardBordered),children:n})},c=e=>{let{headerText:n,link:r,text:i}=e;return(0,a.jsx)(o,{link:r,children:(0,a.jsxs)("span",{children:[(0,a.jsx)("div",{className:(0,t.A)(l.CardTitle,l.BoxRoot,l.PaddingBottom4),style:{pointerEvents:"none"},children:(0,a.jsx)("div",{className:(0,t.A)(l.BoxRoot,l.FlexFlex,l.FlexAlignItemsCenter,l.FlexDirectionRow,l.FlexJustifyContentFlexStart,l.FlexWrapNowrap),style:{marginLeft:"-4px",marginTop:"-4px"},children:(0,a.jsx)("div",{className:(0,t.A)(l.BoxRoot,l.BoxHideIfEmpty,l.MarginTop4,l.MarginLeft4),style:{pointerEvents:"auto"},children:(0,a.jsx)("span",{className:"",children:n})})})}),(0,a.jsx)("span",{className:(0,t.A)(l.TextColor,l.CardBody),children:(0,a.jsx)("p",{children:i})})]})})},d=e=>{let{description:n,children:r,link:t}=e;return(0,a.jsx)(o,{link:t,children:(0,a.jsxs)("div",{className:l.LogoCardContent,children:[(0,a.jsx)("div",{className:l.LogoCardImage,children:r}),(0,a.jsx)("p",{className:l.TextColor,children:n})]})})},m=e=>{let{children:n,link:r}=e;return(0,a.jsx)(o,{link:r,children:(0,a.jsx)("div",{className:l.SmallLogoCardContent,children:(0,a.jsx)("div",{className:(0,t.A)("max-height-img-container",l.SmallLogoCardImage),children:n})})})},h=e=>{let{children:n,description:r,name:t,releaseVersion:s,learnMoreLink:c=""}=e;return(0,a.jsx)(o,{children:(0,a.jsxs)("div",{className:l.NewFeatureCardWrapper,children:[(0,a.jsxs)("div",{className:l.NewFeatureCardContent,children:[(0,a.jsxs)("div",{className:l.NewFeatureCardHeading,children:[t,(0,a.jsx)("br",{}),(0,a.jsx)("hr",{className:l.NewFeatureCardHeadingSeparator})]}),(0,a.jsx)("div",{className:l.LogoCardImage,children:n}),(0,a.jsx)("br",{}),(0,a.jsx)("p",{children:r}),(0,a.jsx)("br",{})]}),(0,a.jsxs)("div",{className:l.NewFeatureCardTags,children:[(0,a.jsx)("div",{children:c&&(0,a.jsx)(i.A,{className:"button button--outline button--sm button--primary",to:c,children:"Learn more"})}),(0,a.jsxs)(i.A,{className:"button button--outline button--sm button--primary",to:`https://github.com/mlflow/mlflow/releases/tag/v${s}`,children:["released in ",s]})]})]})})}}}]);