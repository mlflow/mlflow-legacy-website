"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4298],{15749:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"tracing/api/manual-instrumentation","title":"Manual Tracing","description":"In addition to the Auto Tracing integrations, you can instrument your Python code using the MLflow Tracing SDK. This is especially useful when you need to instrument your custom Python code.","source":"@site/docs/tracing/api/manual-instrumentation.mdx","sourceDirName":"tracing/api","slug":"/tracing/api/manual-instrumentation","permalink":"/docs/2.20.2.dev0/tracing/api/manual-instrumentation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Manual Tracing"},"sidebar":"docsSidebar","previous":{"title":"APIs","permalink":"/docs/2.20.2.dev0/tracing/api/"},"next":{"title":"Query Traces","permalink":"/docs/2.20.2.dev0/tracing/api/search"}}');var l=t(74848),r=t(28453),o=t(49374);t(10493),t(14252),t(11470),t(19365);const i={sidebar_position:1,sidebar_label:"Manual Tracing"},s="Manual Tracing",c={},p=[{value:"Decorator",id:"decorator",level:2},{value:"Example",id:"example",level:3},{value:"Customizing Spans",id:"customizing-spans",level:3},{value:"Adding Trace Tags",id:"adding-trace-tags",level:3},{value:"Automatic Exception Handling",id:"automatic-exception-handling",level:3},{value:"Combining with Auto-Tracing",id:"combining-with-auto-tracing",level:3},{value:"Function Wrapping",id:"function-wrapping",level:3},{value:"Context Manager",id:"context-manager",level:2},{value:"(Advanced) Low-level Client APIs",id:"advanced-low-level-client-apis",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"manual-tracing",children:"Manual Tracing"})}),"\n",(0,l.jsxs)(n.p,{children:["In addition to the ",(0,l.jsx)(n.a,{href:"/tracing/#automatic-tracing",children:"Auto Tracing"})," integrations, you can instrument your Python code using the MLflow Tracing SDK. This is especially useful when you need to instrument your custom Python code."]}),"\n",(0,l.jsx)(n.h2,{id:"decorator",children:"Decorator"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(o.B,{fn:"mlflow.trace",children:(0,l.jsx)(n.code,{children:"@mlflow.trace"})})," decorator allows you to create a span for any function. This approach provides a simple yet effective way to add tracing to your code with minimal effort:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["MLflow detects the ",(0,l.jsx)(n.strong,{children:"parent-child relationships"})," between functions, making it compatible with auto-tracing integrations."]}),"\n",(0,l.jsxs)(n.li,{children:["Captures ",(0,l.jsx)(n.strong,{children:"exceptions"})," during function execution and records them as span events."]}),"\n",(0,l.jsxs)(n.li,{children:["Automatically logs the function\u2019s ",(0,l.jsx)(n.strong,{children:"name, inputs, outputs, and execution time"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Can be used alongside ",(0,l.jsx)(n.strong,{children:"auto-tracing"})," features, such as ",(0,l.jsx)(n.code,{children:"mlflow.openai.autolog"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,l.jsx)(n.p,{children:"The following code is a minimum example of using the decorator for tracing Python functions."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n\n@mlflow.trace(span_type="func", attributes={"key": "value"})\ndef add_1(x):\n    return x + 1\n\n\n@mlflow.trace(span_type="func", attributes={"key1": "value1"})\ndef minus_1(x):\n    return x - 1\n\n\n@mlflow.trace(name="Trace Test")\ndef trace_test(x):\n    step1 = add_1(x)\n    return minus_1(step1)\n\n\ntrace_test(4)\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"Tracing Decorator",src:t(88916).A+"",width:"1354",height:"417"})}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsxs)(n.p,{children:["When a trace contains multiple spans with same name, MLflow appends an auto-incrementing suffix to them, such as ",(0,l.jsx)(n.code,{children:"_1"}),", ",(0,l.jsx)(n.code,{children:"_2"}),"."]})}),"\n",(0,l.jsx)(n.h3,{id:"customizing-spans",children:"Customizing Spans"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(o.B,{fn:"mlflow.trace",children:(0,l.jsx)(n.code,{children:"@mlflow.trace"})})," decorator accepts following arguments to customize the span to be created:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"name"})," parameter to override the span name from the default (the name of decorated function)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"span_type"})," parameter to set the type of span. Set either one of built-in ",(0,l.jsx)(n.a,{href:"/tracing/tracing-schema#span-types",children:"Span Types"})," or a string."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"attributes"})," parameter to add custom attributes to the span."]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'@mlflow.trace(\n    name="call-local-llm", span_type=SpanType.LLM, attributes={"model": "gpt-4o-mini"}\n)\ndef invoke(prompt: str):\n    return client.invoke(\n        messages=[{"role": "user", "content": prompt}], model="gpt-4o-mini"\n    )\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Alternatively, you can update the span dynamically inside the function by using ",(0,l.jsx)(o.B,{fn:"mlflow.get_current_active_span",children:(0,l.jsx)(n.code,{children:"mlflow.get_current_active_span"})})," API."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'@mlflow.trace(span_type=SpanType.LLM)\ndef invoke(prompt: str):\n    model_id = "gpt-4o-mini"\n    # Get the current span (created by the @mlflow.trace decorator)\n    span = mlflow.get_current_active_span()\n    # Set the attribute to the span\n    span.set_attributes({"model": model_id})\n    return client.invoke(messages=[{"role": "user", "content": prompt}], model=model_id)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"adding-trace-tags",children:"Adding Trace Tags"}),"\n",(0,l.jsxs)(n.p,{children:["Tags can be added to traces to provide additional metadata at the trace level. There are a few different ways to set tags on a trace. Please refer to the ",(0,l.jsx)(n.a,{href:"/tracing/api/how-to/#setting-trace-tags",children:"how-to guide"})," for the other methods."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'@mlflow.trace\ndef my_func(x):\n    mlflow.update_current_trace(tags={"fruit": "apple"})\n    return x + 1\n'})}),"\n",(0,l.jsx)(n.h3,{id:"automatic-exception-handling",children:"Automatic Exception Handling"}),"\n",(0,l.jsxs)(n.p,{children:["If an ",(0,l.jsx)(n.code,{children:"Exception"})," is raised during processing of a trace-instrumented operation, an indication will be shown within the UI that the invocation was not\nsuccessful and a partial capture of data will be available to aid in debugging. Additionally, details about the Exception that was raised will be included\nwithin ",(0,l.jsx)(n.code,{children:"Events"})," of the partially completed span, further aiding the identification of where issues are occurring within your code."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"Trace Error",src:t(36703).A+"",width:"1192",height:"720"})}),"\n",(0,l.jsx)(n.h3,{id:"combining-with-auto-tracing",children:"Combining with Auto-Tracing"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"@mlflow.trace"})," decorator can be used in conjunction with auto tracing. For example, the following code combines OpenAI auto-tracing with manually defined spans in a single cohesive and integrated trace."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport openai\n\nmlflow.openai.autolog()\n\n\n@mlflow.trace(span_type=SpanType.CHAIN)\ndef run(question):\n    messages = build_messages()\n    # MLflow automatically generates a span for OpenAI invocation\n    response = openai.OpenAI().chat.completions.create(\n        model="gpt-4o-mini",\n        max_tokens=100,\n        messages=messages,\n    )\n    return parse_response(response)\n\n\n@mlflow.trace\ndef build_messages(question):\n    return [\n        {"role": "system", "content": "You are a helpful chatbot."},\n        {"role": "user", "content": question},\n    ]\n\n\n@mlflow.trace\ndef parse_response(response):\n    return response.choices[0].message.content\n\n\nrun("What is MLflow?")\n'})}),"\n",(0,l.jsx)(n.p,{children:"Running this code generates the following single trace:"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{src:t(88375).A+"",width:"1338",height:"580"})}),"\n",(0,l.jsx)(n.h3,{id:"function-wrapping",children:"Function Wrapping"}),"\n",(0,l.jsxs)(n.p,{children:["Function wrapping provides a flexible way to add tracing to existing functions without modifying their definitions. This is particularly useful when you want to add tracing to third-party functions or functions defined outside of your control. By wrapping an external function with ",(0,l.jsx)(o.B,{fn:"mlflow.trace",children:(0,l.jsx)(n.code,{children:"@mlflow.trace"})}),", you can capture its inputs, outputs, and execution context."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"import math\nimport mlflow\n\n\ndef invocation(x, y, exp=2):\n    # Wrap an external function from the math library\n    traced_pow = mlflow.trace(math.pow)\n    raised = traced_pow(x, exp)\n\n    traced_factorial = mlflow.trace(math.factorial)\n    factorial = traced_factorial(int(raised))\n    return response\n\n\ninvocation(4)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"context-manager",children:"Context Manager"}),"\n",(0,l.jsxs)(n.p,{children:["In addition to the decorator, MLflow allows for creating a span that can then be accessed within any encapsulated arbitrary code block using the ",(0,l.jsx)(o.B,{fn:"mlflow.start_span"})," context manager. It can be useful for capturing complex interactions within your code in finer detail than what is possible by capturing the boundaries of a single function."]}),"\n",(0,l.jsxs)(n.p,{children:["Similarly to the decorator, the context manager automatically captures parent-child relationship, exceptions, execution time, and works with auto-tracing. However, the name, inputs, and outputs of the span must be provided manually. You can set them via the ",(0,l.jsx)(o.B,{fn:"mlflow.entities.Span",children:"Span"})," object that is returned from the context manager."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'with mlflow.start_span(name="my_span") as span:\n    span.set_inputs({"x": 1, "y": 2})\n    z = x + y\n    span.set_outputs(z)\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Below is a slightly more complex example that uses the ",(0,l.jsx)(o.B,{fn:"mlflow.start_span"})," context manager in conjunction with both the decorator and auto-tracing for OpenAI."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import SpanType\n\n\n@mlflow.trace(span_type=SpanType.CHAIN)\ndef start_session():\n    messages = [{"role": "system", "content": "You are a friendly chat bot"}]\n    while True:\n        with mlflow.start_span(name="User") as span:\n            span.set_inputs(messages)\n            user_input = input(">> ")\n            span.set_outputs(user_input)\n\n        if user_input == "BYE":\n            break\n\n        messages.append({"role": "user", "content": user_input})\n\n        response = openai.OpenAI().chat.completions.create(\n            model="gpt-4o-mini",\n            max_tokens=100,\n            messages=messages,\n        )\n        answer = response.choices[0].message.content\n        print(f"\ud83e\udd16: {answer}")\n\n        messages.append({"role": "assistant", "content": answer})\n\n\nmlflow.openai.autolog()\nstart_session()\n'})}),"\n",(0,l.jsx)(n.h2,{id:"advanced-low-level-client-apis",children:"(Advanced) Low-level Client APIs"}),"\n",(0,l.jsxs)(n.p,{children:["When the decorator or context manager does not meet your requirements, you can use the low-level client APIs. For example, you might need to start and end a span from different functions. The client API is designed as a thin wrapper over the MLflow REST APIs, giving you more control over the trace lifecycle. For more details, please refer to the ",(0,l.jsx)(n.a,{href:"/tracing/api/client",children:"MLflow Tracing Client APIs"})," guide."]}),"\n",(0,l.jsxs)(n.admonition,{type:"warning",children:[(0,l.jsx)(n.p,{children:"When using client APIs, please be aware of the following limitations:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The parent-child relationship is NOT captured automatically. You need to manually pass the ID of the parent span."}),"\n",(0,l.jsx)(n.li,{children:"Spans created using the client API do NOT combine with auto-tracing spans."}),"\n",(0,l.jsx)(n.li,{children:"Low-level APIs marked as experimental are subject to change based on backend implementation updates."}),"\n"]})]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(m,{...e})}):m(e)}},49374:(e,n,t)=>{t.d(n,{B:()=>s});t(96540);const a=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.evaluation":"api_reference/python_api/mlflow.evaluation.html","mlflow.fastai":"api_reference/python_api/mlflow.fastai.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.mleap":"api_reference/python_api/mlflow.mleap.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow.recipes":"api_reference/python_api/mlflow.recipes.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var l=t(86025),r=t(28774),o=t(74848);const i=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(a[e])return e}return null};function s(e){let{fn:n,children:t}=e;const s=i(n);if(!s)return(0,o.jsx)(o.Fragment,{children:t});const c=(0,l.Ay)(`/${a[s]}#${n}`);return(0,o.jsx)(r.A,{to:c,target:"_blank",children:t??(0,o.jsxs)("code",{children:[n,"()"]})})}},10493:(e,n,t)=>{t.d(n,{Zp:()=>s,AC:()=>i,WO:()=>p,tf:()=>d,_C:()=>c,$3:()=>m});var a=t(34164);const l={CardGroup:"CardGroup_P84T",MaxThreeColumns:"MaxThreeColumns_FO1r",AutofillColumns:"AutofillColumns_fKhQ",Card:"Card_aSCR",CardBordered:"CardBordered_glGF",CardBody:"CardBody_BhRs",TextColor:"TextColor_a8Tp",BoxRoot:"BoxRoot_Etgr",FlexWrapNowrap:"FlexWrapNowrap_f60k",FlexJustifyContentFlexStart:"FlexJustifyContentFlexStart_ZYv5",FlexDirectionRow:"FlexDirectionRow_T2qL",FlexAlignItemsCenter:"FlexAlignItemsCenter_EHVM",FlexFlex:"FlexFlex__JTE",Link:"Link_fVkl",MarginLeft4:"MarginLeft4_YQSJ",MarginTop4:"MarginTop4_jXKN",PaddingBottom4:"PaddingBottom4_O9gt",LogoCardContent:"LogoCardContent_kCQm",LogoCardImage:"LogoCardImage_JdcX",SmallLogoCardContent:"SmallLogoCardContent_LxhV",SmallLogoCardImage:"SmallLogoCardImage_tPZl",NewFeatureCardContent:"NewFeatureCardContent_Rq3d",NewFeatureCardHeading:"NewFeatureCardHeading_f6q3",NewFeatureCardHeadingSeparator:"NewFeatureCardHeadingSeparator_pSx8",NewFeatureCardTags:"NewFeatureCardTags_IFHO",NewFeatureCardWrapper:"NewFeatureCardWrapper_NQ0k"};var r=t(28774),o=t(74848);const i=e=>{let{children:n,isSmall:t}=e;return(0,o.jsx)("div",{className:(0,a.A)(l.CardGroup,t?l.AutofillColumns:l.MaxThreeColumns),children:n})},s=e=>{let{children:n,link:t=""}=e;return t?(0,o.jsx)(r.A,{className:(0,a.A)(l.Link,l.Card,l.CardBordered),to:t,children:n}):(0,o.jsx)("div",{className:(0,a.A)(l.Card,l.CardBordered),children:n})},c=e=>{let{headerText:n,link:t,text:r}=e;return(0,o.jsx)(s,{link:t,children:(0,o.jsxs)("span",{children:[(0,o.jsx)("div",{className:(0,a.A)(l.CardTitle,l.BoxRoot,l.PaddingBottom4),style:{pointerEvents:"none"},children:(0,o.jsx)("div",{className:(0,a.A)(l.BoxRoot,l.FlexFlex,l.FlexAlignItemsCenter,l.FlexDirectionRow,l.FlexJustifyContentFlexStart,l.FlexWrapNowrap),style:{marginLeft:"-4px",marginTop:"-4px"},children:(0,o.jsx)("div",{className:(0,a.A)(l.BoxRoot,l.BoxHideIfEmpty,l.MarginTop4,l.MarginLeft4),style:{pointerEvents:"auto"},children:(0,o.jsx)("span",{className:"",children:n})})})}),(0,o.jsx)("span",{className:(0,a.A)(l.TextColor,l.CardBody),children:(0,o.jsx)("p",{children:r})})]})})},p=e=>{let{description:n,children:t,link:a}=e;return(0,o.jsx)(s,{link:a,children:(0,o.jsxs)("div",{className:l.LogoCardContent,children:[(0,o.jsx)("div",{className:l.LogoCardImage,children:t}),(0,o.jsx)("p",{className:l.TextColor,children:n})]})})},m=e=>{let{children:n,link:t}=e;return(0,o.jsx)(s,{link:t,children:(0,o.jsx)("div",{className:l.SmallLogoCardContent,children:(0,o.jsx)("div",{className:(0,a.A)("max-height-img-container",l.SmallLogoCardImage),children:n})})})},d=e=>{let{children:n,description:t,name:a,releaseVersion:i,learnMoreLink:c=""}=e;return(0,o.jsx)(s,{children:(0,o.jsxs)("div",{className:l.NewFeatureCardWrapper,children:[(0,o.jsxs)("div",{className:l.NewFeatureCardContent,children:[(0,o.jsxs)("div",{className:l.NewFeatureCardHeading,children:[a,(0,o.jsx)("br",{}),(0,o.jsx)("hr",{className:l.NewFeatureCardHeadingSeparator})]}),(0,o.jsx)("div",{className:l.LogoCardImage,children:n}),(0,o.jsx)("br",{}),(0,o.jsx)("p",{children:t}),(0,o.jsx)("br",{})]}),(0,o.jsxs)("div",{className:l.NewFeatureCardTags,children:[(0,o.jsx)("div",{children:c&&(0,o.jsx)(r.A,{className:"button button--outline button--sm button--primary",to:c,children:"Learn more"})}),(0,o.jsxs)(r.A,{className:"button button--outline button--sm button--primary",to:`https://github.com/mlflow/mlflow/releases/tag/v${i}`,children:["released in ",i]})]})]})})}},88916:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/trace-decorator-8ae22208121b562582947549f8b9a46e.png"},36703:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/trace-exception-d23766aa1c06b25b252c98d5d98cfef5.gif"},88375:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/tracing-auto-manual-mix-683000e63e68335e6dbc94a234193b49.png"}}]);