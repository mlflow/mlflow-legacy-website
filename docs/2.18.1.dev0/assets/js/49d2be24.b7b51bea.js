"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3561],{8718:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var d=n(4848),i=n(8453),o=n(5983),a=n(6581),l=n(1226);const s={},r='Creating a Custom Model: "Add N" Model',c={id:"traditional-ml/creating-custom-pyfunc/notebooks/introduction",title:'Creating a Custom Model: "Add N" Model',description:"Our first example is simple yet illustrative. We'll create a model that adds a specified numeric value, n, to all columns of a Pandas DataFrame input. This will demonstrate the process of defining a custom model, saving it, loading it back, and performing predictions.",source:"@site/docs/traditional-ml/creating-custom-pyfunc/notebooks/introduction.mdx",sourceDirName:"traditional-ml/creating-custom-pyfunc/notebooks",slug:"/traditional-ml/creating-custom-pyfunc/notebooks/introduction",permalink:"/traditional-ml/creating-custom-pyfunc/notebooks/introduction",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Introduction to MLflow Custom Pyfunc",permalink:"/traditional-ml/creating-custom-pyfunc/notebooks/basic-pyfunc"},next:{title:"Customizing a Model's predict method",permalink:"/traditional-ml/creating-custom-pyfunc/notebooks/override-predict"}},h={},m=[{value:"Step 1: Define the Model Class",id:"step-1-define-the-model-class",level:4},{value:"Step 2: Save the Model",id:"step-2-save-the-model",level:4},{value:"Step 3: Load the Model",id:"step-3-load-the-model",level:4},{value:"Step 4: Evaluate the Model",id:"step-4-evaluate-the-model",level:4},{value:"Conclusion",id:"conclusion",level:4}];function u(e){const t={h1:"h1",h4:"h4",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.header,{children:(0,d.jsx)(t.h1,{id:"creating-a-custom-model-add-n-model",children:'Creating a Custom Model: "Add N" Model'})}),"\n",(0,d.jsx)(t.p,{children:"Our first example is simple yet illustrative. We'll create a model that adds a specified numeric value, n, to all columns of a Pandas DataFrame input. This will demonstrate the process of defining a custom model, saving it, loading it back, and performing predictions."}),"\n",(0,d.jsx)(t.h4,{id:"step-1-define-the-model-class",children:"Step 1: Define the Model Class"}),"\n",(0,d.jsx)(t.p,{children:"We begin by defining a Python class for our model. This class should inherit from mlflow.pyfunc.PythonModel and implement the necessary methods."}),"\n",(0,d.jsx)(o.d,{executionCount:1,children:'import mlflow.pyfunc\n\n\nclass AddN(mlflow.pyfunc.PythonModel):\n  """\n  A custom model that adds a specified value `n` to all columns of the input DataFrame.\n\n  Attributes:\n  -----------\n  n : int\n      The value to add to input columns.\n  """\n\n  def __init__(self, n):\n      """\n      Constructor method. Initializes the model with the specified value `n`.\n\n      Parameters:\n      -----------\n      n : int\n          The value to add to input columns.\n      """\n      self.n = n\n\n  def predict(self, context, model_input, params=None):\n      """\n      Prediction method for the custom model.\n\n      Parameters:\n      -----------\n      context : Any\n          Ignored in this example. It\'s a placeholder for additional data or utility methods.\n\n      model_input : pd.DataFrame\n          The input DataFrame to which `n` should be added.\n\n      params : dict, optional\n          Additional prediction parameters. Ignored in this example.\n\n      Returns:\n      --------\n      pd.DataFrame\n          The input DataFrame with `n` added to all columns.\n      """\n      return model_input.apply(lambda column: column + self.n)'}),"\n",(0,d.jsx)(t.h4,{id:"step-2-save-the-model",children:"Step 2: Save the Model"}),"\n",(0,d.jsx)(t.p,{children:"Now that our model class is defined, we can instantiate it and save it using MLflow."}),"\n",(0,d.jsx)(o.d,{executionCount:2,children:'# Define the path to save the model\nmodel_path = "/tmp/add_n_model"\n\n# Create an instance of the model with `n=5`\nadd5_model = AddN(n=5)\n\n# Save the model using MLflow\nmlflow.pyfunc.save_model(path=model_path, python_model=add5_model)'}),"\n",(0,d.jsx)(a.p,{isStderr:!0,children:'/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/_distutils_hack/__init__.py:30: UserWarning: Setuptools is replacing distutils.\nwarnings.warn("Setuptools is replacing distutils.")'}),"\n",(0,d.jsx)(t.h4,{id:"step-3-load-the-model",children:"Step 3: Load the Model"}),"\n",(0,d.jsx)(t.p,{children:"With our model saved, we can load it back using MLflow and then use it for predictions."}),"\n",(0,d.jsx)(o.d,{executionCount:3,children:"# Load the saved model\nloaded_model = mlflow.pyfunc.load_model(model_path)"}),"\n",(0,d.jsx)(t.h4,{id:"step-4-evaluate-the-model",children:"Step 4: Evaluate the Model"}),"\n",(0,d.jsx)(t.p,{children:"Let's now use our loaded model to perform predictions on a sample input and verify its correctness."}),"\n",(0,d.jsx)(o.d,{executionCount:4,children:"import pandas as pd\n\n# Define a sample input DataFrame\nmodel_input = pd.DataFrame([range(10)])\n\n# Use the loaded model to make predictions\nmodel_output = loaded_model.predict(model_input)"}),"\n",(0,d.jsx)(o.d,{executionCount:5,children:"model_output"}),"\n",(0,d.jsx)(l.Q,{children:(0,d.jsx)("div",{dangerouslySetInnerHTML:{__html:'<div>\n<style scoped>\n  .dataframe tbody tr th:only-of-type {\n      vertical-align: middle;\n  }\n\n  .dataframe tbody tr th {\n      vertical-align: top;\n  }\n\n  .dataframe thead th {\n      text-align: right;\n  }\n</style>\n<table border="1" class="dataframe">\n<thead>\n  <tr style="text-align: right;">\n    <th></th>\n    <th>0</th>\n    <th>1</th>\n    <th>2</th>\n    <th>3</th>\n    <th>4</th>\n    <th>5</th>\n    <th>6</th>\n    <th>7</th>\n    <th>8</th>\n    <th>9</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <th>0</th>\n    <td>5</td>\n    <td>6</td>\n    <td>7</td>\n    <td>8</td>\n    <td>9</td>\n    <td>10</td>\n    <td>11</td>\n    <td>12</td>\n    <td>13</td>\n    <td>14</td>\n  </tr>\n</tbody>\n</table>\n</div>'}})}),"\n",(0,d.jsx)(t.h4,{id:"conclusion",children:"Conclusion"}),"\n",(0,d.jsx)(t.p,{children:"This simple example demonstrates the power and flexibility of MLflow's custom pyfunc. By encapsulating arbitrary Python code and its dependencies, custom pyfunc models ensure a consistent and unified interface for a wide range of use cases. Whether you're working with a niche machine learning framework, need custom preprocessing steps, or want to integrate unique prediction logic, pyfunc is the tool for the job."})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(u,{...e})}):u(e)}},6581:(e,t,n)=>{n.d(t,{p:()=>i});var d=n(4848);const i=e=>{let{children:t,isStderr:n}=e;return(0,d.jsxs)("div",{style:{display:"flex",flexDirection:"row"},children:[(0,d.jsx)("div",{style:{width:"2rem",flexShrink:0}}),(0,d.jsx)("pre",{style:{margin:0,borderRadius:0,background:"none",fontSize:"0.85rem",flexGrow:1,padding:"var(--padding-sm)"},children:t})]})}},5983:(e,t,n)=>{n.d(t,{d:()=>a});var d=n(1432);const i="codeBlock_oJcR";var o=n(4848);const a=e=>{let{children:t,executionCount:n}=e;return(0,o.jsxs)("div",{style:{display:"flex",flexDirection:"row",marginTop:"var(--padding-md)",width:"100%"},children:[(0,o.jsx)("div",{style:{width:"2rem",flexShrink:0,fontSize:"0.8rem"},children:`[${n}]`}),(0,o.jsx)("div",{style:{flexGrow:1,minWidth:0},children:(0,o.jsx)(d.A,{className:i,language:"python",children:t})})]})}},1226:(e,t,n)=>{n.d(t,{Q:()=>i});var d=n(4848);const i=e=>{let{children:t}=e;return(0,d.jsxs)("div",{style:{display:"flex",flexDirection:"row",width:"100%"},children:[(0,d.jsx)("div",{style:{width:"2rem",flexShrink:0}}),(0,d.jsx)("div",{style:{flexGrow:1,minWidth:0,fontSize:"0.8rem"},children:t})]})}}}]);