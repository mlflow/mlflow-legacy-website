"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7170],{7775:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>h,contentTitle:()=>d,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>m});var a=n(4848),r=n(8453),i=n(5983),o=n(6581),s=n(1226);const l={},d="MLflow 5 minute Tracking Quickstart",c={id:"getting-started/intro-quickstart/notebooks/tracking_quickstart",title:"MLflow 5 minute Tracking Quickstart",description:"Download this Notebook",source:"@site/docs/getting-started/intro-quickstart/notebooks/tracking_quickstart.mdx",sourceDirName:"getting-started/intro-quickstart/notebooks",slug:"/getting-started/intro-quickstart/notebooks/tracking_quickstart",permalink:"/docs/latest/getting-started/intro-quickstart/notebooks/tracking_quickstart",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"MLflow Tracking Quickstart Notebook",permalink:"/docs/latest/getting-started/intro-quickstart/notebooks/"},next:{title:"Tutorial Overview",permalink:"/docs/latest/getting-started/logging-first-model/"}},h={},m=[{value:"Set the MLflow Tracking URI",id:"set-the-mlflow-tracking-uri",level:3},{value:"Load training data and train a simple model",id:"load-training-data-and-train-a-simple-model",level:2},{value:"Define an MLflow Experiment",id:"define-an-mlflow-experiment",level:2},{value:"Log the model, hyperparameters, and loss metrics to MLflow.",id:"log-the-model-hyperparameters-and-loss-metrics-to-mlflow",level:2},{value:"Load our saved model as a Python Function",id:"load-our-saved-model-as-a-python-function",level:2},{value:"Use our model to predict the iris class type on a Pandas DataFrame",id:"use-our-model-to-predict-the-iris-class-type-on-a-pandas-dataframe",level:2}];function u(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,r.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"mlflow-5-minute-tracking-quickstart",children:"MLflow 5 minute Tracking Quickstart"})}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsxs)("a",{href:"https://raw.githubusercontent.com/mlflow/mlflow/master/docs/source/getting-started/intro-quickstart/notebooks/tracking_quickstart.ipynb",class:"notebook-download-btn",children:[(0,a.jsx)("i",{class:"fas fa-download"}),"Download this Notebook"]}),(0,a.jsx)("br",{}),"\nThis notebook demonstrates using a local MLflow Tracking Server to log, register, and then load a model as a generic Python Function (pyfunc) to perform inference on a Pandas DataFrame."]}),"\n",(0,a.jsx)(e.p,{children:"Throughout this notebook, we'll be using the MLflow fluent API to perform all interactions with the MLflow Tracking Server."}),"\n",(0,a.jsx)(i.d,{executionCount:1,children:"import pandas as pd\nfrom sklearn import datasets\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nimport mlflow\nfrom mlflow.models import infer_signature"}),"\n",(0,a.jsx)(e.h3,{id:"set-the-mlflow-tracking-uri",children:"Set the MLflow Tracking URI"}),"\n",(0,a.jsx)(e.p,{children:"Depending on where you are running this notebook, your configuration may vary for how you initialize the interface with the MLflow Tracking Server."}),"\n",(0,a.jsxs)(e.p,{children:["For this example, we're using a locally running tracking server, but other options are available (The easiest is to use the free managed service within ",(0,a.jsx)(e.a,{href:"https://community.cloud.databricks.com/",children:"Databricks Community Edition"}),")."]}),"\n",(0,a.jsxs)(e.p,{children:["Please see ",(0,a.jsx)(e.a,{href:"https://www.mlflow.org/docs/latest/getting-started/running-notebooks/index.html",children:"the guide to running notebooks here"})," for more information on setting the tracking server uri and configuring access to either managed or self-managed MLflow tracking servers."]}),"\n",(0,a.jsx)(i.d,{executionCount:2,children:'# NOTE: review the links mentioned above for guidance on connecting to a managed tracking server, such as the free Databricks Community Edition\n\nmlflow.set_tracking_uri(uri="http://127.0.0.1:8080")'}),"\n",(0,a.jsx)(e.h2,{id:"load-training-data-and-train-a-simple-model",children:"Load training data and train a simple model"}),"\n",(0,a.jsx)(e.p,{children:"For our quickstart, we're going to be using the familiar iris dataset that is included in scikit-learn. Following the split of the data, we're going to train a simple logistic regression classifier on the training data and calculate some error metrics on our holdout test data."}),"\n",(0,a.jsxs)(e.p,{children:["Note that the only MLflow-related activities in this portion are around the fact that we're using a ",(0,a.jsx)(e.code,{children:"param"})," dictionary to supply our model's hyperparameters; this is to make logging these settings easier when we're ready to log our model and its associated metadata."]}),"\n",(0,a.jsx)(i.d,{executionCount:3,children:'# Load the Iris dataset\nX, y = datasets.load_iris(return_X_y=True)\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Define the model hyperparameters\nparams = {"solver": "lbfgs", "max_iter": 1000, "multi_class": "auto", "random_state": 8888}\n\n# Train the model\nlr = LogisticRegression(**params)\nlr.fit(X_train, y_train)\n\n# Predict on the test set\ny_pred = lr.predict(X_test)\n\n# Calculate accuracy as a target loss metric\naccuracy = accuracy_score(y_test, y_pred)'}),"\n",(0,a.jsx)(e.h2,{id:"define-an-mlflow-experiment",children:"Define an MLflow Experiment"}),"\n",(0,a.jsx)(e.p,{children:"In order to group any distinct runs of a particular project or idea together, we can define an Experiment that will group each iteration (runs) together.\nDefining a unique name that is relevant to what we're working on helps with organization and reduces the amount of work (searching) to find our runs later on."}),"\n",(0,a.jsx)(i.d,{executionCount:4,children:'mlflow.set_experiment("MLflow Quickstart")'}),"\n",(0,a.jsx)(o.p,{children:"<Experiment: artifact_location='mlflow-artifacts:/846578415685150448', creation_time=1699374480748, experiment_id='846578415685150448', last_update_time=1699374480748, lifecycle_stage='active', name='MLflow Quickstart', tags={}>"}),"\n",(0,a.jsx)(e.h2,{id:"log-the-model-hyperparameters-and-loss-metrics-to-mlflow",children:"Log the model, hyperparameters, and loss metrics to MLflow."}),"\n",(0,a.jsxs)(e.p,{children:["In order to record our model and the hyperparameters that were used when fitting the model, as well as the metrics associated with validating the fit model upon holdout data, we initiate a run context, as shown below. Within the scope of that context, any fluent API that we call (such as ",(0,a.jsx)(e.code,{children:"mlflow.log_params()"})," or ",(0,a.jsx)(e.code,{children:"mlflow.sklearn.log_model()"}),") will be associated and logged together to the same run."]}),"\n",(0,a.jsx)(i.d,{executionCount:5,children:'# Start an MLflow run\nwith mlflow.start_run():\n  # Log the hyperparameters\n  mlflow.log_params(params)\n\n  # Log the loss metric\n  mlflow.log_metric("accuracy", accuracy)\n\n  # Set a tag that we can use to remind ourselves what this run was for\n  mlflow.set_tag("Training Info", "Basic LR model for iris data")\n\n  # Infer the model signature\n  signature = infer_signature(X_train, lr.predict(X_train))\n\n  # Log the model\n  model_info = mlflow.sklearn.log_model(\n      sk_model=lr,\n      artifact_path="iris_model",\n      signature=signature,\n      input_example=X_train,\n      registered_model_name="tracking-quickstart",\n  )'}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/_distutils_hack/__init__.py:30: UserWarning: Setuptools is replacing distutils.\nwarnings.warn(\"Setuptools is replacing distutils.\")\nRegistered model 'tracking-quickstart' already exists. Creating a new version of this model...\n2023/11/07 12:17:01 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: tracking-quickstart, version 3\nCreated version '3' of model 'tracking-quickstart'."}),"\n",(0,a.jsx)(e.h2,{id:"load-our-saved-model-as-a-python-function",children:"Load our saved model as a Python Function"}),"\n",(0,a.jsxs)(e.p,{children:["Although we can load our model back as a native scikit-learn format with ",(0,a.jsx)(e.code,{children:"mlflow.sklearn.load_model()"}),", below we are loading the model as a generic Python Function, which is how this model would be loaded for online model serving. We can still use the ",(0,a.jsx)(e.code,{children:"pyfunc"})," representation for batch use cases, though, as is shown below."]}),"\n",(0,a.jsx)(i.d,{executionCount:6,children:"loaded_model = mlflow.pyfunc.load_model(model_info.model_uri)"}),"\n",(0,a.jsx)(o.p,{children:"Downloading artifacts:   0%|          | 0/6 [00:00<?, ?it/s]"}),"\n",(0,a.jsx)(e.h2,{id:"use-our-model-to-predict-the-iris-class-type-on-a-pandas-dataframe",children:"Use our model to predict the iris class type on a Pandas DataFrame"}),"\n",(0,a.jsx)(i.d,{executionCount:7,children:'predictions = loaded_model.predict(X_test)\n\niris_feature_names = datasets.load_iris().feature_names\n\n# Convert X_test validation feature data to a Pandas DataFrame\nresult = pd.DataFrame(X_test, columns=iris_feature_names)\n\n# Add the actual classes to the DataFrame\nresult["actual_class"] = y_test\n\n# Add the model predictions to the DataFrame\nresult["predicted_class"] = predictions\n\nresult[:4]'}),"\n",(0,a.jsx)(s.Q,{children:(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:'<div>\n<style scoped>\n  .dataframe tbody tr th:only-of-type {\n      vertical-align: middle;\n  }\n\n  .dataframe tbody tr th {\n      vertical-align: top;\n  }\n\n  .dataframe thead th {\n      text-align: right;\n  }\n</style>\n<table border="1" class="dataframe">\n<thead>\n  <tr style="text-align: right;">\n    <th></th>\n    <th>sepal length (cm)</th>\n    <th>sepal width (cm)</th>\n    <th>petal length (cm)</th>\n    <th>petal width (cm)</th>\n    <th>actual_class</th>\n    <th>predicted_class</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <th>0</th>\n    <td>6.1</td>\n    <td>2.8</td>\n    <td>4.7</td>\n    <td>1.2</td>\n    <td>1</td>\n    <td>1</td>\n  </tr>\n  <tr>\n    <th>1</th>\n    <td>5.7</td>\n    <td>3.8</td>\n    <td>1.7</td>\n    <td>0.3</td>\n    <td>0</td>\n    <td>0</td>\n  </tr>\n  <tr>\n    <th>2</th>\n    <td>7.7</td>\n    <td>2.6</td>\n    <td>6.9</td>\n    <td>2.3</td>\n    <td>2</td>\n    <td>2</td>\n  </tr>\n  <tr>\n    <th>3</th>\n    <td>6.0</td>\n    <td>2.9</td>\n    <td>4.5</td>\n    <td>1.5</td>\n    <td>1</td>\n    <td>1</td>\n  </tr>\n</tbody>\n</table>\n</div>'}})})]})}function g(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(u,{...t})}):u(t)}},6581:(t,e,n)=>{n.d(e,{p:()=>r});var a=n(4848);const r=t=>{let{children:e,isStderr:n}=t;return(0,a.jsxs)("div",{style:{display:"flex",flexDirection:"row"},children:[(0,a.jsx)("div",{style:{width:"2rem",flexShrink:0}}),(0,a.jsx)("pre",{style:{margin:0,borderRadius:0,background:"none",fontSize:"0.85rem",flexGrow:1,padding:"var(--padding-sm)"},children:e})]})}},5983:(t,e,n)=>{n.d(e,{d:()=>o});var a=n(1432);const r="codeBlock_oJcR";var i=n(4848);const o=t=>{let{children:e,executionCount:n}=t;return(0,i.jsxs)("div",{style:{display:"flex",flexDirection:"row",marginTop:"var(--padding-md)",width:"100%"},children:[(0,i.jsx)("div",{style:{width:"2rem",flexShrink:0,fontSize:"0.8rem"},children:`[${n}]`}),(0,i.jsx)("div",{style:{flexGrow:1,minWidth:0},children:(0,i.jsx)(a.A,{className:r,language:"python",children:e})})]})}},1226:(t,e,n)=>{n.d(e,{Q:()=>r});var a=n(4848);const r=t=>{let{children:e}=t;return(0,a.jsxs)("div",{style:{display:"flex",flexDirection:"row",width:"100%"},children:[(0,a.jsx)("div",{style:{width:"2rem",flexShrink:0}}),(0,a.jsx)("div",{style:{flexGrow:1,minWidth:0,fontSize:"0.8rem"},children:e})]})}}}]);